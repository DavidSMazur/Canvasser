[{'id': '4554', 'description': 'Topic: Explain the concept ofrecursionand its applications in computer science. Instructions:   Write an essay of at least500 wordson the topic of recursion.   Define what recursion is and how it works in general.   Give at leastthree examplesof recursive functions or algorithms in computer science, such as factorial, Fibonacci, binary search, etc. Explain how they use recursion and what are the advantages and disadvantages of using recursion over iteration.   Discuss the challenges and limitations of recursion, such as stack overflow, infinite recursion, memory usage, etc. Suggest some ways to overcome or avoid these problems, such as base cases, memoization, tail recursion, etc.   Use proper terminology, grammar, and citation throughout your essay. You can use any citation style you prefer, but be consistent and clear.   You can use the following sources as references for your essay, but you are also encouraged to find and use other reliable sources:  [Recursion (computer science)] [Recursion in Computer Science: A Comprehensive Guide With Examples] [Recursion Explained with the Flood Fill Algorithm (and Zombies and Cats)]    You must cite everything in proper APA format: https://owl.purdue.edu/owl/research_and_citation/apa_style/apa_formatting_and_style_guide/index.html', 'due_at': '2023-11-21T04:59:59Z'}, {'id': '4555', 'description': '   Assignment 2: Logic and Proof In this assignment, you will practice using truth tables, propositional logic, and first-order logic to reason about some problems. You will also use a theorem prover to check your proofs. Part 1: Truth Tables Use truth tables to prove or disprove the following logical identities:  (A → B) ∧ (B → C) ≡ A → C ¬ (A ∨ B) ≡ ¬ A ∧ ¬ B (A → B) ∨ (B → A) ≡ A ↔ B (A ∧ B) → C ≡ A → (B → C)  Part 2: Propositional Logic Use the rules of inference to prove the following arguments are valid. Show each step of your proof and justify it with the name of the rule you used.  A → B, B → C ∴ A → C ¬ A ∨ B, ¬ B ∨ C, ¬ C ∨ D ∴ ¬ A ∨ D A ↔ B, B ↔ C ∴ A ↔ C A → B, ¬ B ∴ ¬ A  Part 3: First-Order Logic Translate the following sentences from natural language to first-order logic. Use the following predicates and constants:  P(x): x is a person C(x): x is a cat D(x): x is a dog L(x,y): x loves y a: Alice b: Bob c: Charlie   Alice loves Bob, but Bob does not love Alice. Everyone loves someone. No one loves themselves. Charlie loves all cats and dogs.    ', 'due_at': '2023-11-28T04:59:59Z'}, {'id': '4556', 'description': '   Assignment: Functional Programming Languages for Web Development Due date: December 15, 2023 Weight: 40% of the final grade Objective: The objective of this assignment is to compare and contrast three functional programming languages for web development: Haskell, Clojure, and Elm. You will use a set of criteria to evaluate each language, such as syntax, features, libraries, frameworks, tooling, deployment, and interoperability. You will also implement a web application in each language, using the same specifications and requirements, to demonstrate the practical aspects of each language and compare the resulting code quality, functionality, and performance. Requirements: You are required to submit the following deliverables:  A dissertation report that follows the structure and format of the example dissertation provided in the course website. The report should be between 10,000 and 15,000 words, and include the following sections: Introduction, Literature Review, Methodology, Results and Discussion, Conclusion and Future Work, References, and Appendices. The report should be written in a clear, concise, and academic style, and follow the APA citation style. The report should be submitted as a PDF file. A web application implemented in each of the three functional programming languages: Haskell, Clojure, and Elm. The web application should have the following functionality: a user registration and login system, a user profile page, a blog post creation and editing system, a blog post listing and viewing system, a comment system, and a search system. The web application should have a responsive and user-friendly interface, and use a consistent and attractive design. The web application should use a relational database to store the data, and follow the MVC (Model-View-Controller) architecture. The web application should be deployed on a web server, and accessible via a URL. The web application should be submitted as a ZIP file containing the source code, the database schema, the configuration files, and a README file with instructions on how to run and test the web application. A presentation that summarizes the main findings and contributions of the dissertation and the web application. The presentation should be between 15 and 20 minutes long, and include the following slides: Title, Introduction, Literature Review, Methodology, Results and Discussion, Conclusion and Future Work, and References. The presentation should be delivered in a clear, confident, and engaging manner, and use appropriate visual aids, such as graphs, charts, tables, and screenshots. The presentation should be recorded and uploaded to a video-sharing platform, such as YouTube or Vimeo, and the link should be provided in the submission.  Evaluation: You will be evaluated based on the following criteria:  The quality, completeness, and originality of the dissertation report The functionality, usability, and performance of the web application The clarity, coherence, and persuasiveness of the presentation The adherence to the assignment instructions, specifications, and deadlines  Submission: You should submit your deliverables via the course website by the due date. Late submissions will incur a penalty of 10% per day. Plagiarism will result in a zero grade and academic misconduct. You should acknowledge all the sources and references that you use in your work, and cite them properly. You should also include a declaration of originality and a statement of authorship in your report. You should work individually on this assignment, and not collaborate with other students. If you have any questions or difficulties, please contact the instructor or the teaching assistant. Good luck and have fun!   ', 'due_at': '2023-12-16T04:59:59Z'}][{'id': '374', 'title': 'New Assignment - Functional Programming Languages for Web Development', 'description': 'Hello, students!I am pleased to announce that the new assignment for the course is now available on the course website. The assignment is about comparing and contrasting three functional programming languages for web development: Haskell, Clojure, and Elm. You will use a set of criteria to evaluate each language, such as syntax, features, libraries, frameworks, tooling, deployment, and interoperability. You will also implement a web application in each language, using the same specifications and requirements, to demonstrate the practical aspects of each language and compare the resulting code quality, functionality, and performance.This assignment is a great opportunity for you to learn more about functional programming, a paradigm that emphasizes the use of pure functions, immutable data structures, and higher-order abstractions. Functional programming languages, such as Haskell, Clojure, and Elm, have been gaining popularity in recent years for web development, as they offer advantages such as conciseness, expressiveness, modularity, and testability. However, there is no clear consensus on which functional programming language is the best choice for web development, as each language has its own strengths and weaknesses, and different trade-offs between performance, usability, and compatibility. In this assignment, you will explore the current state of functional programming languages for web development, and make informed decisions on which language to use for your projects.The assignment consists of three deliverables: a dissertation report, a web application, and a presentation. The dissertation report should follow the structure and format of the example dissertation provided in the course website. The web application should have the following functionality: a user registration and login system, a user profile page, a blog post creation and editing system, a blog post listing and viewing system, a comment system, and a search system. The presentation should summarize the main findings and contributions of the dissertation and the web application. You can find more details and instructions on the assignment page on the course website.The due date for the assignment is December 15, 2023. The assignment is worth 40% of the final grade. You should submit your deliverables via the course website by the due date. Late submissions will incur a penalty of 10% per day. Plagiarism will result in a zero grade and academic misconduct. You should acknowledge all the sources and references that you use in your work, and cite them properly. You should also include a declaration of originality and a statement of authorship in your report. You should work individually on this assignment, and not collaborate with other students. If you have any questions or difficulties, please contact me or the teaching assistant.I hope you enjoy working on this assignment, and I look forward to seeing your creative and innovative solutions. Good luck and have fun!'}, {'id': '373', 'title': 'Assignment 2 Posted', 'description': 'Hello, students!I hope you are enjoying the course so far and learning a lot about logic and proof. For your first assignment, you will practice using truth tables, propositional logic, and first-order logic to reason about some problems. You will also use a theorem prover to check your proofs.The assignment is posted on the course website and it is due on Monday, November 27, 2023 at 11:59 PM. You can submit your solutions as a PDF file on Canvas. Please make sure your solutions are clear, concise, and well-formatted. You may work in pairs, but you must write your own solutions and acknowledge your partner.The assignment has four parts, each worth 25 points. In Part 1, you will use truth tables to prove or disprove some logical identities. In Part 2, you will use the rules of inference to prove some arguments are valid. In Part 3, you will translate some sentences from natural language to first-order logic. In Part 4, you will use the Prover9 online tool to check your proofs from Part 2.If you have any questions or difficulties with the assignment, please feel free to contact me or the TAs. We are here to help you and we want you to succeed. You can also post your questions on Piazza, where your classmates and instructors can answer them.I hope you have fun with this assignment and learn something new. Happy proving! 😊'}, {'id': '372', 'title': 'Assignment 1 Posted', 'description': 'Hello students,I hope you are all doing well and enjoying the course so far. I am writing to inform you that a new assignment has been posted on the course website. The assignment is aboutrecurssion.The assignment is due onMonday, November 20, 2023at11:59 PM EST. You can submit your work as aPDF filethrough the course website. Please make sure to follow the instructions and the rubric carefully. Late submissions will incur a10% penaltyper day.If you have any questions or concerns about the assignment, please feel free to contact me or the teaching assistants. You can also post your questions on the course discussion forum, where you can interact with your classmates and help each other.I hope you enjoy working on this assignment and learning more about machine learning. Good luck and have fun!Sincerely,Your instructor'}, {'id': '369', 'title': 'Hack Team - Please sign consent form', 'description': 'Hello Team Canvasser,Good luck on your hack!If you have not done so, please sign the "Responsible API and Data Usage Agreement" form before using API/Data:https://signnow.com/s/aWgVRVTI'}][{'course_id': '309', 'user_id': '2688', 'course_name': 'MHacks: Canvasser', 'syllabus': '   Here is an example syllabus for a computer science course that covers recursion, proofs, and functional programming: Course Title: Introduction to Recursion, Proofs, and Functional Programming Course Code: CS 101 Instructor: Dr. Alice Smith Email: alice@cs.edu  Office Hours: Monday and Wednesday, 10:00 AM - 11:00 AM, or by appointment Course Description: This course introduces the fundamental concepts and techniques of recursion, proofs, and functional programming. Students will learn how to write recursive functions, prove properties of programs, and use functional languages such as Scheme and Haskell. The course will also cover topics such as induction, recursion trees, higher-order functions, lazy evaluation, and type systems. Course Objectives: By the end of this course, students will be able to:  Understand and apply the principles of recursion and induction Write and analyze recursive algorithms and data structures Prove correctness and complexity of recursive programs Use functional programming paradigms and languages Compare and contrast imperative and functional programming styles Appreciate the beauty and elegance of functional programming Course Prerequisites: Students are expected to have prior knowledge of basic programming concepts, such as variables, expressions, control structures, and functions. Familiarity with a programming language such as Python, Java, or C++ is recommended, but not required.  Course Textbook: The course textbook is [How to Design Programs, Second Edition] by Matthias Felleisen, Robert Bruce Findler, Matthew Flatt, and Shriram Krishnamurthi. The textbook is available online for free at [https://htdp.org/]. Course Schedule: The course will consist of 15 weeks of lectures and labs, as follows:    Week Topic Reading     1 Introduction to recursion and functional programming Chapter 1   2 Recursion on lists and natural numbers Chapter 2   3 Structural induction and recursion trees Chapter 3   4 Higher-order functions and abstraction Chapter 4   5 Midterm exam N/A   6 Introduction to Scheme Chapter 5   7 Recursion on trees and graphs Chapter 6   8 Lazy evaluation and streams Chapter 7   9 Introduction to Haskell Chapter 8   10 Types and polymorphism Chapter 9   11 Type classes and monads Chapter 10   12 Logic and proofs Chapter 11   13 Program verification and testing Chapter 12   14 Final project presentations N/A   15 Final exam N/A    Course Policies: The following policies apply to this course:  Attendance and participation: Students are expected to attend and participate in all lectures and labs. Attendance will be taken at the beginning of each class. Participation will be assessed based on the quality and frequency of the students’ contributions to the class discussions and activities. Late submission: Late submissions will incur a penalty of 10% per day, up to a maximum of 50%. No submissions will be accepted after five days past the deadline. Academic integrity: Students are expected to uphold the highest standards of academic integrity. Any form of cheating, plagiarism, or collusion will result in a zero grade for the assignment or exam, and a report to the academic misconduct committee. Students are encouraged to collaborate and discuss the course material with their peers, but they must write their own solutions and code. Students must cite any sources that they use or consult, including textbooks, websites, and other students. Accommodations: Students with disabilities or special needs are welcome to request accommodations from the instructor. Students should contact the instructor as soon as possible to discuss their needs and provide the necessary documentation. The instructor will work with the students and the disability services office to ensure that they have a fair and positive learning experience.    '}]